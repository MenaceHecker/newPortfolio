// src/components/MyWorkspace.tsx (or wherever you save it)
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/my_workspace._xyz.glb
Author: TrickyEgor (https://sketchfab.com/trickyegor)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/my-workspace-xyz-a0c8b0c64023406fb75826cb501f6003
Title: My Workspace. XYZ
*/  

import * as React from 'react'; // Use * as React for consistency in TSX
import { useGLTF } from '@react-three/drei';
import type { GLTF } from 'three-stdlib';

// Define a type for the props of your component
// You can add more specific types if you expect other props like position, rotation, etc.
type GLTFResult = GLTF & {
  nodes: {
    // You can list specific node names and their types if you need to access them directly
    // e.g., SpeakerLeft_Plastic_0: THREE.Mesh;
    // For now, using a generic index signature is fine for auto-generated files
    [name: string]: THREE.Mesh;
  };
  materials: {
    // Similar to nodes, you can list specific material names and their types
    // e.g., Plastic: THREE.Material;
    [name: string]: THREE.Material;
  };
};

// Define the component's functional type
// React.JSX.IntrinsicElements['group'] provides the standard props for a <group> element
// This allows you to pass common Three.js props like position, rotation, scale, etc.
export function Model(props: JSX.IntrinsicElements['group']) {
  // Cast useGLTF result to your defined GLTFResult type
  const { nodes, materials } = useGLTF('/models/my_workspace._xyz.glb') as GLTFResult;

  return (
    <group {...props} dispose={null}>
      <group position={[3.263, 0.076, -2.193]} rotation={[0, 0.187, 0]} scale={0.531}>
        <mesh geometry={nodes.SpeakerLeft_Plastic_0.geometry} material={materials.Plastic} />
        <mesh geometry={nodes.SpeakerLeft_lambert1_0.geometry} material={materials.lambert1} />
      </group>
      <group position={[0.519, 0, 0.53]}>
        <mesh geometry={nodes.SpeakerRight_Plastic_0.geometry} material={materials.Plastic} />
        <mesh geometry={nodes.SpeakerRight_lambert1_0.geometry} material={materials.lambert1} />
      </group>
      <group position={[-0.994, -0.578, 0.763]} rotation={[-0.04, 0.27, 0.012]} scale={0.694}>
        <mesh geometry={nodes.Keyboard_Plastic_0.geometry} material={materials.Plastic} />
        <mesh geometry={nodes.Keyboard_Mouse1_0.geometry} material={materials.Mouse1} />
      </group>
      <group position={[3.343, 4.23, 0.43]} scale={0.115}>
        <mesh geometry={nodes.Mouse_Plastic_0.geometry} material={materials.Plastic} />
        <mesh geometry={nodes.Mouse_Mouse1_0.geometry} material={materials.Mouse1} />
      </group>
      <mesh geometry={nodes.Table1_Table_0.geometry} material={materials.Table} />
      <mesh geometry={nodes.Table2_Castors_0.geometry} material={materials.Castors} />
      <mesh geometry={nodes.Table2_Table_0.geometry} material={materials.Table} />
      <mesh geometry={nodes.Table2_Handle_0.geometry} material={materials.Handle} />
      <mesh geometry={nodes.Mat1_Mat_0.geometry} material={materials.material} />
      <mesh geometry={nodes.Mat1_Plastic_0.geometry} material={materials.Plastic} />
      <mesh geometry={nodes.Pen_Plastic_0.geometry} material={materials.Plastic} />
      <mesh geometry={nodes.Computer_Plastic_0.geometry} material={materials.Plastic} />
      <mesh geometry={nodes.Computer_Comp2_0.geometry} material={materials.Comp2} />
      <mesh geometry={nodes.LeftMonitor_Plastic_0.geometry} material={materials.Plastic} />
      <mesh geometry={nodes.LeftMonitor_Screen_0.geometry} material={materials.Screen} />
      <mesh geometry={nodes.RightMonitor_Plastic_0.geometry} material={materials.Plastic} />
      <mesh geometry={nodes.RightMonitor_Screen_0.geometry} material={materials.Screen} />
      <mesh geometry={nodes.Tablet_Castors_0.geometry} material={materials.Castors} />
      <mesh geometry={nodes.Tablet_Mat_0.geometry} material={materials.material} />
      <mesh geometry={nodes.Tablet_Plastic_0.geometry} material={materials.Plastic} />
      <mesh geometry={nodes.pCube4_lambert1_0.geometry} material={materials.lambert1} position={[3.926, 4.363, -2.341]} scale={[0.093, 0.046, 0.192]} />
      <mesh geometry={nodes.ElectricExtender_lambert1_0.geometry} material={materials.lambert1} />
      <mesh geometry={nodes.SpeakersCable_Cable_0.geometry} material={materials.Cable} position={[-1.638, 4.319, -1.46]} rotation={[Math.PI / 2, 0, 0]} scale={0.018} />
      <mesh geometry={nodes.SecondMonitorCable_Cable_0.geometry} material={materials.Cable} />
      <mesh geometry={nodes.MainMonitorCable_Cable_0.geometry} material={materials.Cable} />
      <mesh geometry={nodes.MouseCable_Cable_0.geometry} material={materials.Cable} />
      <mesh geometry={nodes.pCube5_Wood_0.geometry} material={materials.Wood} position={[0, -0.111, 0]} scale={[22.353, 0.175, 14.32]} />
    </group>
  );
}

useGLTF.preload('/models/my_workspace._xyz.glb');